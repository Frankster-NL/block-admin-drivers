#!/usr/bin/env node
"use strict"

var http = require('http')
var shoe = require('shoe')
var request = require('superagent')
var exec = require('child_process').exec
var ecstatic = require('ecstatic')
var MuxDemux = require('mux-demux')
var ansi = require('ansi-html-stream')
var program = require('commander')
var through = require('through')

program
.version(require('../package.json').version)
.option('-p, --port [port]', 'port to listen on [port]', 9099)
.option('-d, --dest [dir]', 'directory in which to install drivers', process.cwd())
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('driver-install')

var executable = __dirname + '/../node_modules/ninja-toolbelt/bin/ninja install --dest ' + program.dest
var docs = {}
var app = http.createServer(ecstatic(__dirname + '/../public'))

app.listen(program.port, function() {
  log('listening on localhost:' + program.port)
})

var DRIVERS_URL = 'http://wiki.ninjablocks.com/drivers.json'

var sock = shoe(function (stream) {
  log('new connection')
  var mx = MuxDemux()
  request
  .get(DRIVERS_URL)
  .end(function(err, res) {
    if (err) return console.error(err)
    var drivers = mx.createStream('drivers')
    var obj = JSON.parse(res.text)
    obj.forEach(function(driver) {
      drivers.write(driver)
    })
  })

  mx.on('connection', function(stream) {
    if (!stream.meta || !(stream.meta.command && stream.meta.url)) return
    var name = stream.meta.url
    log('installing', name)
    log('executing: ', executable + ' ' + name + ' /opt/ninja/drivers')

    var installation = exec(executable + ' ' + name + ' /opt/ninja/drivers')

    // TODO: fix mess.
    installation.stdout.pipe(ansi()).pipe(through(function(data) {
      this.push(data)
    }, function() {
    installation.on('exit', function(code) {
      if (code !== 0) {
        log('Installation Failed', name)
        stream.end('Installation Failed\n\n')
        return
      }
      log('Installation Success!')
      stream.end('Installation Success\n\n')
    })
    })).pipe(stream)
    installation.stderr.pipe(ansi()).pipe(through(function(data) {
      this.push(data)
    }, function() {})).pipe(stream)

    if (process.verbose) {
      installation.stdout.pipe(process.stdout)
      installation.stderr.pipe(process.stderr)
    }
  })
})

sock.install(app, '/driver-admin')
