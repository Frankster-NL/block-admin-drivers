#!/usr/bin/env node
"use strict"

var http = require('http')
var shoe = require('shoe')
var request = require('superagent')
var exec = require('child_process').exec
var ecstatic = require('ecstatic')(__dirname + '/../public')
var MuxDemux = require('mux-demux')
var ansi = require('ansi-html-stream')
var program = require('commander')
var through = require('through')
var path = require('path')
var JSONStream = require('JSONStream')
var concat = require('concat-stream')
var hyperspace = require('hyperspace')
var hyperstream = require('hyperstream')
var from = require('from')
var fs = require('fs')
var read = fs.createReadStream

var DRIVERS_URL = 'http://wiki.ninjablocks.com/drivers.json'

program
.version(require('../package.json').version)
.option('-p, --port [port]', 'port to listen on [port]', 9099)
.option('-d, --driver-path [path]', 'path to drivers', process.cwd())
.option('--pid [file]', 'file containing pid of ninja client', '')
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

var NINJA_CMD = path.normalize(__dirname + '/../node_modules/ninja-toolbelt/bin/ninja')
var toolbelt = require('ninja-toolbelt')(program.driverPath)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('driver-admin')

var docs = {}
var driversHtml = fs.readFileSync(__dirname + '/../public/drivers.html')
var pageHtml = fs.readFileSync(__dirname + '/../public/index.html')

var driverRender = require('../driver-render')
var cachedDrivers = []

/*
 * App startup
 */

var app = http.createServer(function(req, res) {
  if (req.url === '/') {
    getDrivers(function(err, drivers) {
      var driverStream = drivers.pipe(driverRender())

      read(__dirname + '/../public/index.html')
      .pipe(hyperstream({"body > .container": read(__dirname + '/../public/drivers.html')}))
      .pipe(hyperstream({"#drivers tbody": driverStream}))
      .pipe(res)
    })
  }
  else ecstatic(req, res)
})

app.listen(program.port, function() {
  log('listening on localhost:' + program.port)
})

updateDriversCache()

/*
 * Handle incoming stream of 'commands'.
 */

var sock = shoe(function(stream) {
  log('new connection')
  var mx = MuxDemux()
  stream.pipe(mx).pipe(stream)
  mx.on('connection', function(stream) {
    if (!stream.meta || !(stream.meta.command && stream.meta.url)) return
    if (!commands[stream.meta.command]) stream.end()
    stream.pipe(commands[stream.meta.command](stream.meta)).pipe(stream)
  })
})

sock.install(app, '/driver-admin')

/*
 * Command definitions
 */

var commands = {}

commands.install = function install(options) {
  var executable = NINJA_CMD + ' install --driver-path ' + program.driverPath
  executable += program.pid ? '--pid ' + program.pid : ''
  executable += ' ' + options.url
  return commandStream(executable).pipe(ansi())
}

commands.uninstall = function uninstall(options) {
  var executable = NINJA_CMD + ' uninstall --driver-path ' + program.driverPath
  executable += program.pid ? '--pid ' + program.pid : ''
  executable += ' ' + options.url
  return commandStream(executable).pipe(ansi())
}

/**
 * Executes `command`, returns stream of stdout/stderr.
 * Keeps the stream open to write status code before
 * closing.
 *
 * TODO: encode status code better. mux demux?
 *
 * @param {String} command command to execute
 * @return {Stream}
 */

function commandStream(command) {
  log('executing: ', command)
  var child = exec(command)
  child.on('close', function(code) {
    log(command + ' exited with status ' + code)
    if (code > 0) stream.write('Failed!\n\n')
    else stream.write('Success!\n\n')
    stream.end()
  })
  var stream = through(function(data) {this.push(data)})
  child.stdout.pipe(stream, {end: false})
  child.stderr.pipe(stream, {end: false})
  return stream
}

function updateDriversCache() {
  updateDriversCache.updating = true
  log('updating drivers cache from %s', DRIVERS_URL)
  JSONStreamRequest(DRIVERS_URL)
  .pipe(concat(function(result) {
    updateDriversCache.updating = false
    cachedDrivers = result
    app.emit('cache-updated')
  }))
}

function JSONStreamRequest(url) {
 return request
  .get(url)
  .pipe(JSONStream.parse([true]))
}

function getDrivers(fn) {
  if (!cachedDrivers || updateDriversCache.updating) {
    return app.once('cache-updated', getDrivers)
  }
  toolbelt.getInstalledDrivers(function(err, installedDrivers) {
    if (err) return fn(err)
    fn(null, from(cachedDrivers)
    .pipe(getStatus(installedDrivers)))
  })
}

function getStatus(installedDrivers) {
  return through(function(driver) {
    if (installedDrivers.indexOf(driver.name) !== -1) driver.status = 'Installed'
    this.push(driver)
  })
}


