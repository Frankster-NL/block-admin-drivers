#!/usr/bin/env node
"use strict"

var http = require('http')
var shoe = require('shoe')
var request = require('superagent')
var exec = require('child_process').exec
var ecstatic = require('ecstatic')
var MuxDemux = require('mux-demux')
var ansi = require('ansi-html-stream')
var program = require('commander')
var through = require('through')
var path = require('path')

program
.version(require('../package.json').version)
.option('-p, --port [port]', 'port to listen on [port]', 9099)
.option('-d, --driver-path [path]', 'path to drivers', process.cwd())
.option('-v, --verbose', 'verbose output')
.parse(process.argv)

if (program.verbose) process.env.DEBUG = '*'
var log = require('debug')('driver-install')

var docs = {}
var app = http.createServer(ecstatic(__dirname + '/../public'))

app.listen(program.port, function() {
  log('listening on localhost:' + program.port)
})

var DRIVERS_URL = 'http://wiki.ninjablocks.com/drivers.json'

var sock = shoe(function(stream) {
  log('new connection')
  var mx = MuxDemux()
  stream.pipe(mx).pipe(stream)

  request
  .get(DRIVERS_URL)
  .end(function(err, res) {
    log('got drivers list')
    if (err) return console.error(err)
    var drivers = mx.createStream('drivers')
    var obj = JSON.parse(res.text)
    obj.forEach(function(driver) {
      drivers.write(driver)
    })
  })

  mx.on('connection', function(stream) {
    if (!stream.meta || !(stream.meta.command && stream.meta.url)) return
    if (!commands[stream.meta.command]) stream.end()
    stream.pipe(commands[stream.meta.command](stream.meta)).pipe(stream)
  })
})

var commands = {}
commands.install = function install(options) {
  var cmd = path.normalize(__dirname + '/../node_modules/ninja-toolbelt/bin/ninja')
  var executable = cmd + ' install --dest ' + program.dest
  return commandStream(executable).pipe(ansi())
}
commands.uninstall = function uninstall(options) {
  var cmd = path.normalize(__dirname + '/../node_modules/ninja-toolbelt/bin/ninja')
  var executable = cmd + ' install --dest ' + program.dest
  return commandStream(executable).pipe(ansi())
}

function commandStream(command) {
  log('executing: ', command)
  var child = exec(command)
  child.on('close', function(code) {
    log(command + ' exited with status ' + code)
    stream.write(code)
    stream.end()
  })
  var stream = through(function(data) {this.push(data)})
  child.stdout.pipe(stream, {end: false})
  child.stderr.pipe(stream, {end: false})
  return stream
}

sock.install(app, '/driver-admin')
